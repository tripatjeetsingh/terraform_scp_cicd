# .github/workflows/deploy.yaml
on:
  push:
    branches:
      - main # your "trunk" branch
  pull_request:
#env:
#  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  deploy-staging:
    name: Deploy SCPs to Staging
    runs-on: ubuntu-latest
    ##needs: build
    environment: staging
    # required to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write
      contents: read
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::742555182181:role/AWS_Github_OpenID_Staging_Role
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: us-east-2 # use your region here.      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init -input=false
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false
      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
  deploy-production:
    name: Deploy SCPs to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment: production
    # required to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write
      contents: read
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::910164138727:role/AWS_Github_OpenID_Role
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: us-east-2 # use your region here.    
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init -input=false
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false
      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
